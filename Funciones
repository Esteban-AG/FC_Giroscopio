using LinearAlgebra
# Derivada parcial aproximada por diferencia central para f=f(x1,...,xn)
function ∂xj(f,x0,ind,h=1e-5)
    # Para funciones escalares
    if length(x0) == 1
        return (f(x0+h)-f(x0-h))/2h
    # Para funciones vectoriales
    else
        H = zeros(length(x0))
        H[ind] = h
        return (f(x0+H)-f(x0-H))/2h
    end

end

# Jacobiano
function J(F,x)
    # F(x)=(f1(x1,..,xn),..,fn(x1,..,xn))
    n = length(x)
    J = zeros(n,n)
    for j in 1:n
        J[:,j] = ∂xj(F,x,j)
    end
    return J
end

# Newton-Raphson
function NewtonRaph(f,x_inicial,ε=1e-7)
    iter = 1000
    l = length(x_inicial)
    i = 2
    # Para funciones escalares
    if l == 1
        X = zeros(iter)
        X[1] = x_inicial
        while abs(f(X[i-1]))>ε
            (i>=iter) && break   # Máximo iter iteraciones
            X[i] = X[i-1] - f(X[i-1])/∂xj(f,X[i-1],1,1e-6)
            i += 1
        end
        return X[i-1]
    # Para funciones vectoriales
    else
        X = zeros(iter, l)
        X[1,:] = x_inicial
        while norm(f(X[i-1,:]))>ε
            (i>=iter) && break   # Máximo iter iteraciones
            X[i,:] = X[i-1,:] - inv(J(f,X[i-1,:]))*f(X[i-1,:])
            i += 1
        end
        return X[i-1,:]

    end
end
# Algoritmo de Crank-Nicholson (o regla trapezoidal)
function Crank_Nicholson(f,x0,t0,tf,h)
    # h -> tamaño de paso
    # f = dx/dt que no depende explícitamente del tiempo
    T = range(t0,stop = tf, step = h)
    N = length(T)
    l = length(x0)

    # Implementar regla del trapecio
    # Para funciones escalares
    if l==1
        X = zeros(N)
        X[1] = x0
        for i in 2:N
            k1 = X[i-1]
            aux(z) = k1 + (h/2)*(f(k1)+f(z))-z
            k2 = NewtonRaph(aux,k1)
            X[i] = X[i-1] + (h/2)*(f(k1) + f(k2))
        end
        return T,X
    # Para funciones vectoriales
    else
        X = zeros(N,l)
        X[1,:] = x0
        for i in 2:N
            k1 = X[i-1,:]
            aux(z) = k1 + (h/2)*(f(k1)+f(z))-z
            k2 = NewtonRaph(aux,k1)
            X[i,:] = X[i-1,:] + (h/2)*(f(k1) + f(k2))
        end
        return T,X
    end
end
function RK4(f,x0,t0,tf,h)
    tt = range(t0,stop = tf, step = h)
    N = length(tt)
    l = length(x0)


    if l == 1
        xx = zeros(N)
        xx[1] = x0
        for i in 2:N
            k1 = f(xx[i-1])
            k2 = f(xx[i-1]+(h/2)*k1)
            k3 = f(xx[i-1]+(h/2)*k2)
            k4 = f(xx[i-1]+h*k3)

            xx[i] = xx[i-1]+(h/6)*(k1+2*k2+2*k3+k4)
        end
        return tt,xx

    else
        xx = zeros(N,l)
        xx[1,:] = x0
        for i in 2:N
            k1 = f(xx[i-1,:])
            k2 = f(xx[i-1,:]+(h/2)*k1)
            k3 = f(xx[i-1,:]+(h/2)*k2)
            k4 = f(xx[i-1,:]+h*k3)

            xx[i,:] = xx[i-1,:]+(h/6)*(k1+2*k2+2*k3+k4)
        end
        return tt,xx
    end
    
end
